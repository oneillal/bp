# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  vmImage: 'windows-latest'

stages:
# build
- stage: validate
  displayName: Validate YAML
  jobs:
  - job: filevalidator
    pool:
      vmImage:  $(vmImage)
    steps:
      - task: Files-Validator@1
        inputs:
          rootDir: '$(Build.SourcesDirectory)'
          validateXML: false
          validateJSON: false
          validateYAML: true
          validatePS: false

- stage: build
  displayName: Build Stage
  dependsOn: validate
  jobs:
  - job: buildJob
    displayName: build job
    pool:
      vmImage:  $(vmImage)
    steps:
    # must be done before build
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'x00159362'
          scannerMode: 'MSBuild'
          projectKey: 'bpSonar'
          projectName: 'bpSonar'
          extraProperties: |
            sonar.exclusions=**/wwwroot/**/*

      - task: NuGetToolInstaller@1

#      - task: NuGetCommand@2
#        inputs:
#          restoreSolution: '$(solution)'        

# Switch to DotNetCore for build and test
      - task: DotNetCoreCLI@2
        displayName: 'Build task'
        inputs:
          command: 'build'
          arguments: '--configuration $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'Publish build artefacts'
        inputs:
          command: publish
          arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          modifyOutputPath: true
          zipAfterPublish: true

 #     - task: PublishBuildArtifacts@1
 #       inputs:
 #         path: '$(build.artifactstagingdirectory)'
 #         artifact: drop

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Pipeline.Workspace)' 
          artifactName: drop

#      - task: VSBuild@1
#        inputs:
#          solution: '$(solution)'
#          msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
#          platform: '$(buildPlatform)'
#          configuration: '$(buildConfiguration)'

#      - task: VSTest@2
#        inputs:
#          platform: '$(buildPlatform)'
#          configuration: '$(buildConfiguration)'

# Code coverage reports using tutorial at https://ardalis.com/generate-code-coverage-reports-with-reportgenerator-in-azure-devops
#      - task: DotNetCoreCLI@2
#        displayName: 'Run Tests'
#        inputs:
#          command: 'test'
#          projects: '**/*Test*/*.csproj'
#          arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
#
      # Run all tests with "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura" to generate the code coverage file
      - task: DotNetCoreCLI@2
        displayName: 'Unit Tests'
        inputs:
          command: test
          arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
          projects: '**/*UnitTest*/*.csproj'
          nobuild: true

      - task: reportgenerator@4
        inputs:
          reports: '$(Build.SourcesDirectory)/*Test*/coverage.cobertura.xml'
          targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
          reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
          assemblyfilters: '-xunit*'

      # Publish the code coverage result (summary and web site)
      # The summary allows to view the coverage percentage in the summary tab
      # The web site allows to view which lines are covered directly in Azure Pipeline
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
          reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
          
      - task: dependency-check-build-task@5
        inputs:
          projectName: 'bpOwaspDepCheck'
          scanPath: '$(Build.SourcesDirectory)'
          excludePath: '**/wwwroot/**/*'
          format: 'ALL'
          #failOnCVSS: '7'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'dependency-check\dependency-check-junit.xml'
          searchFolder: '$(Common.TestResultsDirectory)'
          testRunTitle: 'OWASP Dependency Tests'

      - task: SonarCloudAnalyze@1
        displayName: 'Run code analysis on SonarCloud'

      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'

#      - task: PublishBuildArtifacts@1
#        displayName: 'publish build artefacts'
#        inputs:
#          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#          ArtifactName: 'drop'
#          publishLocation: 'Container'          

- stage: deploy
  displayName: "Deploy to Azure"
  dependsOn: build
  jobs:
  - deployment: deployAZ
    displayName: deploy to Azure
    pool:
      vmImage: $(vmImage)
    environment: 'bp'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure'
              appType: 'webApp'
              WebAppName: 'bponeillal'
              package: $(System.WorkFolder)/**/*.zip
          - task: DotNetCoreCLI@2
            displayName: "UI Tests"
            inputs:
              command: test
              arguments: '--configuration $(BuildConfiguration)'
              projects: '**/*Test*/*.csproj'
              nobuild: true              
